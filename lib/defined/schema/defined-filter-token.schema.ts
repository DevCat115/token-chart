import { z } from 'zod';
import { definedExchangeSchema } from '@/lib/defined/schema/defined-exchange.schema';
import { definedPairSchema } from '@/lib/defined/schema/defined-pair.schema';
import { definedEnhancedTokenSchema } from '@/lib/defined/schema/defined-enhanced-token.schema';

export const definedNumberFilterSchema = z.object({
  gt: z.number().optional(),
  gte: z.number().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
});
export type DefinedNumberFilter = z.infer<typeof definedNumberFilterSchema>;

export const definedTokenFiltersSchema = z.object({
  age: definedNumberFilterSchema.optional(),
  buyCount1: definedNumberFilterSchema.optional(),
  buyCount4: definedNumberFilterSchema.optional(),
  buyCount12: definedNumberFilterSchema.optional(),
  buyCount24: definedNumberFilterSchema.optional(),
  change1: definedNumberFilterSchema.optional(),
  change4: definedNumberFilterSchema.optional(),
  change12: definedNumberFilterSchema.optional(),
  change24: definedNumberFilterSchema.optional(),
  createdAt: definedNumberFilterSchema.optional(),
  exchangeAddress: z.string().array().optional(),
  fdv: definedNumberFilterSchema.optional(),
  high1: definedNumberFilterSchema.optional(),
  high4: definedNumberFilterSchema.optional(),
  high12: definedNumberFilterSchema.optional(),
  high24: definedNumberFilterSchema.optional(),
  holders: definedNumberFilterSchema.optional(),
  includeScams: z.boolean().optional(),
  lastTransaction: definedNumberFilterSchema.optional(),
  liquidity: definedNumberFilterSchema.optional(),
  low1: definedNumberFilterSchema.optional(),
  low4: definedNumberFilterSchema.optional(),
  low12: definedNumberFilterSchema.optional(),
  low24: definedNumberFilterSchema.optional(),
  marketCap: definedNumberFilterSchema.optional(),
  network: z.number().array().optional(),
  priceUSD: definedNumberFilterSchema.optional(),
  sellCount1: definedNumberFilterSchema.optional(),
  sellCount4: definedNumberFilterSchema.optional(),
  sellCount12: definedNumberFilterSchema.optional(),
  sellCount24: definedNumberFilterSchema.optional(),
  txnCount1: definedNumberFilterSchema.optional(),
  txnCount4: definedNumberFilterSchema.optional(),
  txnCount12: definedNumberFilterSchema.optional(),
  txnCount24: definedNumberFilterSchema.optional(),
  uniqueBuys1: definedNumberFilterSchema.optional(),
  uniqueBuys4: definedNumberFilterSchema.optional(),
  uniqueBuys12: definedNumberFilterSchema.optional(),
  uniqueBuys24: definedNumberFilterSchema.optional(),
  uniqueSells1: definedNumberFilterSchema.optional(),
  uniqueSells4: definedNumberFilterSchema.optional(),
  uniqueSells12: definedNumberFilterSchema.optional(),
  uniqueSells24: definedNumberFilterSchema.optional(),
  uniqueTransactions1: definedNumberFilterSchema.optional(),
  uniqueTransactions4: definedNumberFilterSchema.optional(),
  uniqueTransactions12: definedNumberFilterSchema.optional(),
  uniqueTransactions24: definedNumberFilterSchema.optional(),
  volume1: definedNumberFilterSchema.optional(),
  volume4: definedNumberFilterSchema.optional(),
  volume12: definedNumberFilterSchema.optional(),
  volume24: definedNumberFilterSchema.optional(),
});
export type DefinedTokenFilters = z.infer<typeof definedTokenFiltersSchema>;

export const definedTokenPairStatisticsTypeSchema = z.enum(['FILTERED', 'UNFILTERED']);
export type DefinedTokenPairStatisticsType = z.infer<typeof definedTokenPairStatisticsTypeSchema>;

export const definedTokenRankingAttributeSchema = z.enum([
  'age',
  'buyCount1',
  'buyCount4',
  'buyCount12',
  'buyCount24',
  'change1',
  'change4',
  'change12',
  'change24',
  'createdAt',
  'high1',
  'high4',
  'high12',
  'high24',
  'holders',
  'lastTransaction',
  'liquidity',
  'low1',
  'low4',
  'low12',
  'low24',
  'marketCap',
  'priceUSD',
  'sellCount1',
  'sellCount4',
  'sellCount12',
  'sellCount24',
  'txnCount1',
  'txnCount4',
  'txnCount12',
  'txnCount24',
  'uniqueBuys1',
  'uniqueBuys4',
  'uniqueBuys12',
  'uniqueBuys24',
  'uniqueSells1',
  'uniqueSells4',
  'uniqueSells12',
  'uniqueSells24',
  'uniqueTransactions1',
  'uniqueTransactions4',
  'uniqueTransactions12',
  'uniqueTransactions24',
  'volume1',
  'volume4',
  'volume12',
  'volume24',
]);
export type DefinedTokenRankingAttribute = z.infer<typeof definedTokenRankingAttributeSchema>;

export const definedRankingDirectionSchema = z.enum(['ASC', 'DESC']);
export type DefinedRankingDirection = z.infer<typeof definedRankingDirectionSchema>;

export const definedTokenRankingsSchema = z.object({
  attribute: definedTokenRankingAttributeSchema,
  direction: definedRankingDirectionSchema,
});
export type DefinedTokenRankings = z.infer<typeof definedTokenRankingsSchema>;

export const definedFilterTokenParamSchema = z.object({
  limit: z.number().optional(),
  offset: z.number().optional(),
  phrase: z.string().optional(),
  tokens: z.string().array().optional(),
  filters: definedTokenFiltersSchema.optional(),
  rankings: definedTokenRankingsSchema.array().optional(),
  statsType: definedTokenPairStatisticsTypeSchema.optional(),
  fields: z.string().optional(),
});
export type DefinedFilterTokenParam = z.infer<typeof definedFilterTokenParamSchema>;

export const definedFilterTokenResultSchema = z.object({
  buyCount1: z.number().optional(),
  buyCount4: z.number().optional(),
  buyCount12: z.number().optional(),
  buyCount24: z.number().optional(),
  change1: z.string().optional(),
  change4: z.string().optional(),
  change12: z.string().optional(),
  change24: z.string().optional(),
  createdAt: z.number().optional(),
  exchanges: definedExchangeSchema.array().optional(),
  high1: z.string().optional(),
  high4: z.string().optional(),
  high12: z.string().optional(),
  high24: z.string().optional(),
  holders: z.number().optional(),
  isScam: z.boolean().optional(),
  lastTransaction: z.number().optional(),
  liquidity: z.string().optional(),
  low1: z.string().optional(),
  low4: z.string().optional(),
  low12: z.string().optional(),
  low24: z.string().optional(),
  marketCap: z.string().optional(),
  pair: definedPairSchema.optional(),
  priceUSD: z.string().optional(),
  quoteToken: z.string().optional(),
  sellCount1: z.number().optional(),
  sellCount4: z.number().optional(),
  sellCount12: z.number().optional(),
  sellCount24: z.number().optional(),
  token: definedEnhancedTokenSchema.optional(),
  txnCount1: z.number().optional(),
  txnCount4: z.number().optional(),
  txnCount12: z.number().optional(),
  txnCount24: z.number().optional(),
  uniqueBuys1: z.number().optional(),
  uniqueBuys4: z.number().optional(),
  uniqueBuys12: z.number().optional(),
  uniqueBuys24: z.number().optional(),
  uniqueSells1: z.number().optional(),
  uniqueSells4: z.number().optional(),
  uniqueSells12: z.number().optional(),
  uniqueSells24: z.number().optional(),
  uniqueTransactions1: z.number().optional(),
  uniqueTransactions4: z.number().optional(),
  uniqueTransactions12: z.number().optional(),
  uniqueTransactions24: z.number().optional(),
  volume1: z.string().optional(),
  volume4: z.string().optional(),
  volume12: z.string().optional(),
  volume24: z.string().optional(),
});
export type DefinedFilterTokenResult = z.infer<typeof definedFilterTokenResultSchema>;
